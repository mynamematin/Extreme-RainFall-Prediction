{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7476a6c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy as sc\n",
    "from scipy.signal import butter, filtfilt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "add_data = \"/home/cccr/roxy/matin/MTech_project/data/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "72975864",
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_signal_scipy(signal,sample_freq,ltime_period,htime_period,keep_mean):\n",
    "    filter_signal=np.zeros(signal.shape)\n",
    "    if any(np.isnan(signal)):\n",
    "        raise ValueError('There is NaN in the signal')\n",
    "    else:\n",
    "        hf=1./ltime_period\n",
    "        lf=1./htime_period\n",
    "\n",
    "        temp_fft = sc.fftpack.fft(signal)\n",
    "\n",
    "        fftfreq = np.fft.fftfreq(len(signal),sample_freq) ### daily data it is 1./365 ## monthly data 1./12 ## yearly data=1\n",
    "          \n",
    "        i1=(np.abs(fftfreq) >= lf) & (np.abs(fftfreq) <= hf)  \n",
    "        inv_fft=np.zeros(temp_fft.size,dtype=complex)\n",
    "        inv_fft[i1]=temp_fft[i1]\n",
    "        if keep_mean:\n",
    "            inv_fft[0]=temp_fft[0]\n",
    "        filter_signal= np.real_if_close(sc.fftpack.ifft(inv_fft))\n",
    "    \n",
    "    return filter_signal\n",
    "\n",
    "def norm_anom_var(var):\n",
    "    mean_var = np.mean(var)\n",
    "    anom_var = var - mean_var\n",
    "    std_var = np.std(var)\n",
    "    norm_anom_var = anom_var / std_var\n",
    "    return norm_anom_var\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "af725ef9",
   "metadata": {},
   "outputs": [],
   "source": [
    "##DATA\n",
    "\n",
    "rf = xr.open_dataarray(add_data + \"rfbobmm_daily_1998-2019.nc\")[:-30]\n",
    "rf = rf.interpolate_na(dim=\"time\")\n",
    "sst = xr.open_dataarray(add_data + \"tmpC_sstbob_1998-2020.nc\")[:-731]\n",
    "\n",
    "sample_freq = 1\n",
    "ltime_period = 30\n",
    "htime_period = 60\n",
    "keep_mean = 0\n",
    "\n",
    "filtered_rf = rf\n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        filtered_rf[:,j,i] = filter_signal_scipy(rf[:,j,i].values, sample_freq,\n",
    "                                              ltime_period, htime_period, keep_mean)\n",
    "filtered_sst = sst\n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        if any(np.isnan(sst[:,j,i].values)):\n",
    "            pass\n",
    "        else:\n",
    "            filtered_sst[:,j,i] = filter_signal_scipy(sst[:,j,i].values, sample_freq,ltime_period, htime_period, keep_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1d719313",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = xr.open_dataarray(add_data + \"rfbobmm_daily_1998-2019.nc\")[:-30]\n",
    "rf = rf.interpolate_na(dim=\"time\")\n",
    "sst = xr.open_dataarray(add_data + \"tmpC_sstbob_1998-2020.nc\")[:-731]\n",
    "\n",
    "n_rf = rf\n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        n_rf[:,j,i] = norm_anom_var(rf[:,j,i])\n",
    "n_sst = sst        \n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        n_sst[:,j,i] = norm_anom_var(sst[:,j,i])\n",
    "\n",
    "\n",
    "sample_freq = 1\n",
    "ltime_period = 30\n",
    "htime_period = 60\n",
    "keep_mean = 0\n",
    "\n",
    "filtered_rf = n_rf\n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        filtered_rf[:,j,i] = filter_signal_scipy(n_rf[:,j,i].values, sample_freq,\n",
    "                                              ltime_period, htime_period, keep_mean)\n",
    "filtered_sst = n_sst\n",
    "for i in range(0,39):\n",
    "    for j in range(0,25):\n",
    "        if any(np.isnan(n_sst[:,j,i].values)):\n",
    "            pass\n",
    "        else:\n",
    "            filtered_sst[:,j,i] = filter_signal_scipy(n_sst[:,j,i].values, sample_freq,\n",
    "                                              ltime_period, htime_period, keep_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0c91a2e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = xr.open_dataarray(add_data + \"rfbobmm_daily_1998-2019.nc\")[:-30]\n",
    "rf = rf.interpolate_na(dim=\"time\")\n",
    "sst = xr.open_dataarray(add_data + \"tmpC_sstbob_1998-2020.nc\")[:-731]\n",
    "\n",
    "sst_mon = sst.isel(time=sst.time.dt.month.isin([5, 6, 7, 8, 9, 10]))\n",
    "rf_mon = rf.isel(time=rf.time.dt.month.isin([5, 6, 7, 8, 9, 10]))\n",
    "Fsst_mon = filtered_sst.isel(time=filtered_sst.time.dt.month.isin([5, 6, 7, 8, 9, 10]))\n",
    "Frf_mon = filtered_rf.isel(time=filtered_rf.time.dt.month.isin([5, 6, 7, 8, 9, 10]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef1e87a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (time: 186)&gt;\n",
       "array([ 0.11295165,  0.13188258, -0.04702603, -0.04656232, -0.04410227,\n",
       "       -0.04015004, -0.03527157, -0.03006446, -0.02512653, -0.02102454,\n",
       "       -0.01826442, -0.01726445, -0.01833243, -0.02164809, -0.02725137,\n",
       "       -0.03503725, -0.04475741, -0.0560286 , -0.06834756, -0.08111177,\n",
       "       -0.09364528, -0.1052286 , -0.11513106, -0.12264488, -0.12711883,\n",
       "       -0.12799048, -0.12481555, -0.11729278, -0.10528357, -0.08882532,\n",
       "       -0.0681376 , -0.04362105, -0.01584881,  0.01444934,  0.04640963,\n",
       "        0.07906286,  0.11136791,  0.14224887,  0.17063446,  0.19549821,\n",
       "        0.21589772,  0.2310116 ,  0.24017262,  0.24289563,  0.23889916,\n",
       "        0.22811984,  0.21071908,  0.1870813 ,  0.15780444,  0.12368209,\n",
       "        0.08567869,  0.04489819,  0.00254742, -0.04010445, -0.08176888,\n",
       "       -0.12118191, -0.15714732, -0.18857744, -0.2145303 , -0.23424149,\n",
       "       -0.24714969, -0.25291526, -0.25143045, -0.24282202, -0.22744511,\n",
       "       -0.20586942, -0.17885782, -0.14733855, -0.11237174, -0.07511179,\n",
       "       -0.03676686,  0.00144286,  0.03832686,  0.07276422,  0.10374037,\n",
       "        0.13037957,  0.15197183,  0.16799338,  0.1781203 ,  0.1822347 ,\n",
       "        0.18042342,  0.17296955,  0.16033728,  0.14315058,  0.12216665,\n",
       "        0.0982456 ,  0.07231718,  0.04534587,  0.01829593, -0.00790252,\n",
       "       -0.0323851 , -0.05438146, -0.07323898, -0.08844169, -0.09962328,\n",
       "       -0.10657436, -0.10924365, -0.10773338, -0.1022891 , -0.09328488,\n",
       "       -0.08120416, -0.06661747, -0.0501579 , -0.03249526, -0.01431013,\n",
       "        0.00373134,  0.02100081,  0.03692867,  0.05102158,  0.06287628,\n",
       "        0.07218927,  0.0787621 ,  0.08250238,  0.08342065,  0.0816236 ,\n",
       "        0.07730369,  0.07072646,  0.06221555,  0.05213658,  0.0408805 ,\n",
       "        0.02884712,  0.01642959,  0.00400038, -0.00810069, -0.01957606,\n",
       "       -0.03017726, -0.039709  , -0.04803051, -0.0550541 , -0.06074147,\n",
       "       -0.06509797, -0.06816532, -0.07001316, -0.07073028, -0.07041568,\n",
       "       -0.06917018, -0.0670891 , -0.06425622, -0.06073936, -0.05658798,\n",
       "       -0.05183255, -0.04648592, -0.04054654, -0.03400304, -0.02684027,\n",
       "       -0.01904601, -0.01061813, -0.00157169,  0.00805448,  0.01819225,\n",
       "        0.02873996,  0.03955992,  0.05047792,  0.06128478,  0.07174011,\n",
       "        0.08157814,  0.09051543,  0.09826029,  0.10452351,  0.10902973,\n",
       "        0.1115294 ,  0.11181048,  0.10970933,  0.10512046,  0.09800459,\n",
       "        0.08839452,  0.07639852,  0.06220107,  0.04606075,  0.02830526,\n",
       "        0.00932371, -0.01044359, -0.03051754, -0.05039441, -0.06956122,\n",
       "       -0.08751187, -0.10376336, -0.1178714 , -0.12944505, -0.13815956,\n",
       "       -0.14376727, -0.14610574, -0.14510316, -0.14078063, -0.13325141,\n",
       "       -0.12271705], dtype=float32)\n",
       "Coordinates:\n",
       "  * time     (time) datetime64[ns] 2016-10-30 2016-10-31 ... 2017-10-31</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 186</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-225d4de4-1403-4169-8f81-bcf0c368bbd6' class='xr-array-in' type='checkbox' checked><label for='section-225d4de4-1403-4169-8f81-bcf0c368bbd6' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.113 0.1319 -0.04703 -0.04656 ... -0.1451 -0.1408 -0.1333 -0.1227</span></div><div class='xr-array-data'><pre>array([ 0.11295165,  0.13188258, -0.04702603, -0.04656232, -0.04410227,\n",
       "       -0.04015004, -0.03527157, -0.03006446, -0.02512653, -0.02102454,\n",
       "       -0.01826442, -0.01726445, -0.01833243, -0.02164809, -0.02725137,\n",
       "       -0.03503725, -0.04475741, -0.0560286 , -0.06834756, -0.08111177,\n",
       "       -0.09364528, -0.1052286 , -0.11513106, -0.12264488, -0.12711883,\n",
       "       -0.12799048, -0.12481555, -0.11729278, -0.10528357, -0.08882532,\n",
       "       -0.0681376 , -0.04362105, -0.01584881,  0.01444934,  0.04640963,\n",
       "        0.07906286,  0.11136791,  0.14224887,  0.17063446,  0.19549821,\n",
       "        0.21589772,  0.2310116 ,  0.24017262,  0.24289563,  0.23889916,\n",
       "        0.22811984,  0.21071908,  0.1870813 ,  0.15780444,  0.12368209,\n",
       "        0.08567869,  0.04489819,  0.00254742, -0.04010445, -0.08176888,\n",
       "       -0.12118191, -0.15714732, -0.18857744, -0.2145303 , -0.23424149,\n",
       "       -0.24714969, -0.25291526, -0.25143045, -0.24282202, -0.22744511,\n",
       "       -0.20586942, -0.17885782, -0.14733855, -0.11237174, -0.07511179,\n",
       "       -0.03676686,  0.00144286,  0.03832686,  0.07276422,  0.10374037,\n",
       "        0.13037957,  0.15197183,  0.16799338,  0.1781203 ,  0.1822347 ,\n",
       "        0.18042342,  0.17296955,  0.16033728,  0.14315058,  0.12216665,\n",
       "        0.0982456 ,  0.07231718,  0.04534587,  0.01829593, -0.00790252,\n",
       "       -0.0323851 , -0.05438146, -0.07323898, -0.08844169, -0.09962328,\n",
       "       -0.10657436, -0.10924365, -0.10773338, -0.1022891 , -0.09328488,\n",
       "       -0.08120416, -0.06661747, -0.0501579 , -0.03249526, -0.01431013,\n",
       "        0.00373134,  0.02100081,  0.03692867,  0.05102158,  0.06287628,\n",
       "        0.07218927,  0.0787621 ,  0.08250238,  0.08342065,  0.0816236 ,\n",
       "        0.07730369,  0.07072646,  0.06221555,  0.05213658,  0.0408805 ,\n",
       "        0.02884712,  0.01642959,  0.00400038, -0.00810069, -0.01957606,\n",
       "       -0.03017726, -0.039709  , -0.04803051, -0.0550541 , -0.06074147,\n",
       "       -0.06509797, -0.06816532, -0.07001316, -0.07073028, -0.07041568,\n",
       "       -0.06917018, -0.0670891 , -0.06425622, -0.06073936, -0.05658798,\n",
       "       -0.05183255, -0.04648592, -0.04054654, -0.03400304, -0.02684027,\n",
       "       -0.01904601, -0.01061813, -0.00157169,  0.00805448,  0.01819225,\n",
       "        0.02873996,  0.03955992,  0.05047792,  0.06128478,  0.07174011,\n",
       "        0.08157814,  0.09051543,  0.09826029,  0.10452351,  0.10902973,\n",
       "        0.1115294 ,  0.11181048,  0.10970933,  0.10512046,  0.09800459,\n",
       "        0.08839452,  0.07639852,  0.06220107,  0.04606075,  0.02830526,\n",
       "        0.00932371, -0.01044359, -0.03051754, -0.05039441, -0.06956122,\n",
       "       -0.08751187, -0.10376336, -0.1178714 , -0.12944505, -0.13815956,\n",
       "       -0.14376727, -0.14610574, -0.14510316, -0.14078063, -0.13325141,\n",
       "       -0.12271705], dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-e563b12a-6c37-4bde-9b9e-32a968d21b3e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-e563b12a-6c37-4bde-9b9e-32a968d21b3e' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2016-10-30 ... 2017-10-31</div><input id='attrs-1704f480-0414-4dd6-a8bc-23088e441bcd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1704f480-0414-4dd6-a8bc-23088e441bcd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-26a4ad30-dfea-427b-9aea-20b2a62f3115' class='xr-var-data-in' type='checkbox'><label for='data-26a4ad30-dfea-427b-9aea-20b2a62f3115' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2016-10-30T00:00:00.000000000&#x27;, &#x27;2016-10-31T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-01T00:00:00.000000000&#x27;, &#x27;2017-05-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-03T00:00:00.000000000&#x27;, &#x27;2017-05-04T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-05T00:00:00.000000000&#x27;, &#x27;2017-05-06T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-07T00:00:00.000000000&#x27;, &#x27;2017-05-08T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-09T00:00:00.000000000&#x27;, &#x27;2017-05-10T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-11T00:00:00.000000000&#x27;, &#x27;2017-05-12T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-13T00:00:00.000000000&#x27;, &#x27;2017-05-14T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-15T00:00:00.000000000&#x27;, &#x27;2017-05-16T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-17T00:00:00.000000000&#x27;, &#x27;2017-05-18T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-19T00:00:00.000000000&#x27;, &#x27;2017-05-20T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-21T00:00:00.000000000&#x27;, &#x27;2017-05-22T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-23T00:00:00.000000000&#x27;, &#x27;2017-05-24T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-25T00:00:00.000000000&#x27;, &#x27;2017-05-26T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-27T00:00:00.000000000&#x27;, &#x27;2017-05-28T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-29T00:00:00.000000000&#x27;, &#x27;2017-05-30T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-05-31T00:00:00.000000000&#x27;, &#x27;2017-06-01T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-02T00:00:00.000000000&#x27;, &#x27;2017-06-03T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-04T00:00:00.000000000&#x27;, &#x27;2017-06-05T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-06T00:00:00.000000000&#x27;, &#x27;2017-06-07T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-08T00:00:00.000000000&#x27;, &#x27;2017-06-09T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-10T00:00:00.000000000&#x27;, &#x27;2017-06-11T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-12T00:00:00.000000000&#x27;, &#x27;2017-06-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-14T00:00:00.000000000&#x27;, &#x27;2017-06-15T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-16T00:00:00.000000000&#x27;, &#x27;2017-06-17T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-18T00:00:00.000000000&#x27;, &#x27;2017-06-19T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-20T00:00:00.000000000&#x27;, &#x27;2017-06-21T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-22T00:00:00.000000000&#x27;, &#x27;2017-06-23T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-24T00:00:00.000000000&#x27;, &#x27;2017-06-25T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-26T00:00:00.000000000&#x27;, &#x27;2017-06-27T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-28T00:00:00.000000000&#x27;, &#x27;2017-06-29T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-06-30T00:00:00.000000000&#x27;, &#x27;2017-07-01T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-02T00:00:00.000000000&#x27;, &#x27;2017-07-03T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-04T00:00:00.000000000&#x27;, &#x27;2017-07-05T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-06T00:00:00.000000000&#x27;, &#x27;2017-07-07T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-08T00:00:00.000000000&#x27;, &#x27;2017-07-09T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-10T00:00:00.000000000&#x27;, &#x27;2017-07-11T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-12T00:00:00.000000000&#x27;, &#x27;2017-07-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-14T00:00:00.000000000&#x27;, &#x27;2017-07-15T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-16T00:00:00.000000000&#x27;, &#x27;2017-07-17T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-18T00:00:00.000000000&#x27;, &#x27;2017-07-19T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-20T00:00:00.000000000&#x27;, &#x27;2017-07-21T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-22T00:00:00.000000000&#x27;, &#x27;2017-07-23T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-24T00:00:00.000000000&#x27;, &#x27;2017-07-25T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-26T00:00:00.000000000&#x27;, &#x27;2017-07-27T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-28T00:00:00.000000000&#x27;, &#x27;2017-07-29T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-07-30T00:00:00.000000000&#x27;, &#x27;2017-07-31T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-01T00:00:00.000000000&#x27;, &#x27;2017-08-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-03T00:00:00.000000000&#x27;, &#x27;2017-08-04T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-05T00:00:00.000000000&#x27;, &#x27;2017-08-06T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-07T00:00:00.000000000&#x27;, &#x27;2017-08-08T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-09T00:00:00.000000000&#x27;, &#x27;2017-08-10T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-11T00:00:00.000000000&#x27;, &#x27;2017-08-12T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-13T00:00:00.000000000&#x27;, &#x27;2017-08-14T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-15T00:00:00.000000000&#x27;, &#x27;2017-08-16T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-17T00:00:00.000000000&#x27;, &#x27;2017-08-18T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-19T00:00:00.000000000&#x27;, &#x27;2017-08-20T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-21T00:00:00.000000000&#x27;, &#x27;2017-08-22T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-23T00:00:00.000000000&#x27;, &#x27;2017-08-24T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-25T00:00:00.000000000&#x27;, &#x27;2017-08-26T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-27T00:00:00.000000000&#x27;, &#x27;2017-08-28T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-29T00:00:00.000000000&#x27;, &#x27;2017-08-30T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-08-31T00:00:00.000000000&#x27;, &#x27;2017-09-01T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-02T00:00:00.000000000&#x27;, &#x27;2017-09-03T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-04T00:00:00.000000000&#x27;, &#x27;2017-09-05T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-06T00:00:00.000000000&#x27;, &#x27;2017-09-07T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-08T00:00:00.000000000&#x27;, &#x27;2017-09-09T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-10T00:00:00.000000000&#x27;, &#x27;2017-09-11T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-12T00:00:00.000000000&#x27;, &#x27;2017-09-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-14T00:00:00.000000000&#x27;, &#x27;2017-09-15T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-16T00:00:00.000000000&#x27;, &#x27;2017-09-17T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-18T00:00:00.000000000&#x27;, &#x27;2017-09-19T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-20T00:00:00.000000000&#x27;, &#x27;2017-09-21T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-22T00:00:00.000000000&#x27;, &#x27;2017-09-23T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-24T00:00:00.000000000&#x27;, &#x27;2017-09-25T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-26T00:00:00.000000000&#x27;, &#x27;2017-09-27T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-28T00:00:00.000000000&#x27;, &#x27;2017-09-29T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-09-30T00:00:00.000000000&#x27;, &#x27;2017-10-01T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-02T00:00:00.000000000&#x27;, &#x27;2017-10-03T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-04T00:00:00.000000000&#x27;, &#x27;2017-10-05T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-06T00:00:00.000000000&#x27;, &#x27;2017-10-07T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-08T00:00:00.000000000&#x27;, &#x27;2017-10-09T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-10T00:00:00.000000000&#x27;, &#x27;2017-10-11T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-12T00:00:00.000000000&#x27;, &#x27;2017-10-13T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-14T00:00:00.000000000&#x27;, &#x27;2017-10-15T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-16T00:00:00.000000000&#x27;, &#x27;2017-10-17T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-18T00:00:00.000000000&#x27;, &#x27;2017-10-19T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-20T00:00:00.000000000&#x27;, &#x27;2017-10-21T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-22T00:00:00.000000000&#x27;, &#x27;2017-10-23T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-24T00:00:00.000000000&#x27;, &#x27;2017-10-25T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-26T00:00:00.000000000&#x27;, &#x27;2017-10-27T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-28T00:00:00.000000000&#x27;, &#x27;2017-10-29T00:00:00.000000000&#x27;,\n",
       "       &#x27;2017-10-30T00:00:00.000000000&#x27;, &#x27;2017-10-31T00:00:00.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ac9c9fb4-04be-47c4-be9e-11ea6bee5059' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-ac9c9fb4-04be-47c4-be9e-11ea6bee5059' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray (time: 186)>\n",
       "array([ 0.11295165,  0.13188258, -0.04702603, -0.04656232, -0.04410227,\n",
       "       -0.04015004, -0.03527157, -0.03006446, -0.02512653, -0.02102454,\n",
       "       -0.01826442, -0.01726445, -0.01833243, -0.02164809, -0.02725137,\n",
       "       -0.03503725, -0.04475741, -0.0560286 , -0.06834756, -0.08111177,\n",
       "       -0.09364528, -0.1052286 , -0.11513106, -0.12264488, -0.12711883,\n",
       "       -0.12799048, -0.12481555, -0.11729278, -0.10528357, -0.08882532,\n",
       "       -0.0681376 , -0.04362105, -0.01584881,  0.01444934,  0.04640963,\n",
       "        0.07906286,  0.11136791,  0.14224887,  0.17063446,  0.19549821,\n",
       "        0.21589772,  0.2310116 ,  0.24017262,  0.24289563,  0.23889916,\n",
       "        0.22811984,  0.21071908,  0.1870813 ,  0.15780444,  0.12368209,\n",
       "        0.08567869,  0.04489819,  0.00254742, -0.04010445, -0.08176888,\n",
       "       -0.12118191, -0.15714732, -0.18857744, -0.2145303 , -0.23424149,\n",
       "       -0.24714969, -0.25291526, -0.25143045, -0.24282202, -0.22744511,\n",
       "       -0.20586942, -0.17885782, -0.14733855, -0.11237174, -0.07511179,\n",
       "       -0.03676686,  0.00144286,  0.03832686,  0.07276422,  0.10374037,\n",
       "        0.13037957,  0.15197183,  0.16799338,  0.1781203 ,  0.1822347 ,\n",
       "        0.18042342,  0.17296955,  0.16033728,  0.14315058,  0.12216665,\n",
       "        0.0982456 ,  0.07231718,  0.04534587,  0.01829593, -0.00790252,\n",
       "       -0.0323851 , -0.05438146, -0.07323898, -0.08844169, -0.09962328,\n",
       "       -0.10657436, -0.10924365, -0.10773338, -0.1022891 , -0.09328488,\n",
       "       -0.08120416, -0.06661747, -0.0501579 , -0.03249526, -0.01431013,\n",
       "        0.00373134,  0.02100081,  0.03692867,  0.05102158,  0.06287628,\n",
       "        0.07218927,  0.0787621 ,  0.08250238,  0.08342065,  0.0816236 ,\n",
       "        0.07730369,  0.07072646,  0.06221555,  0.05213658,  0.0408805 ,\n",
       "        0.02884712,  0.01642959,  0.00400038, -0.00810069, -0.01957606,\n",
       "       -0.03017726, -0.039709  , -0.04803051, -0.0550541 , -0.06074147,\n",
       "       -0.06509797, -0.06816532, -0.07001316, -0.07073028, -0.07041568,\n",
       "       -0.06917018, -0.0670891 , -0.06425622, -0.06073936, -0.05658798,\n",
       "       -0.05183255, -0.04648592, -0.04054654, -0.03400304, -0.02684027,\n",
       "       -0.01904601, -0.01061813, -0.00157169,  0.00805448,  0.01819225,\n",
       "        0.02873996,  0.03955992,  0.05047792,  0.06128478,  0.07174011,\n",
       "        0.08157814,  0.09051543,  0.09826029,  0.10452351,  0.10902973,\n",
       "        0.1115294 ,  0.11181048,  0.10970933,  0.10512046,  0.09800459,\n",
       "        0.08839452,  0.07639852,  0.06220107,  0.04606075,  0.02830526,\n",
       "        0.00932371, -0.01044359, -0.03051754, -0.05039441, -0.06956122,\n",
       "       -0.08751187, -0.10376336, -0.1178714 , -0.12944505, -0.13815956,\n",
       "       -0.14376727, -0.14610574, -0.14510316, -0.14078063, -0.13325141,\n",
       "       -0.12271705], dtype=float32)\n",
       "Coordinates:\n",
       "  * time     (time) datetime64[ns] 2016-10-30 2016-10-31 ... 2017-10-31"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " Frf_mon.mean(dim = ['lon', 'lat'])[-370:-184]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "49f59270",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First Std Deviation for SST monsoon DATA =  0.10136956721544266\n",
      "First Std Deviation for RF monsoon DATA =  0.10848603397607803\n"
     ]
    }
   ],
   "source": [
    "sst_mean = Fsst_mon.mean(dim = ['lon', 'lat'])[-368:-184]\n",
    "rf_mean = Frf_mon.mean(dim = ['lon', 'lat'])[-368:-184]\n",
    "rf_std = rf_mean.std().data\n",
    "sst_std = sst_mean.std().data\n",
    "print(\"First Std Deviation for SST monsoon DATA = \",sst_mean.std().data)\n",
    "print(\"First Std Deviation for RF monsoon DATA = \",rf_mean.std().data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fb888dbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10,8])\n",
    "\n",
    "# Plot filtered rainfall data\n",
    "rainfall_mean = Frf_mon.mean(dim = ['lon', 'lat'])[-368:-184]\n",
    "filtered_rf = xr.DataArray(rainfall_mean, coords={\"time\":rainfall_mean.time},dims=[\"time\"])\n",
    "x = filtered_rf.time.data\n",
    "y = filtered_rf.data\n",
    "filtered_rf.plot(color = 'b', label='Filtered Rainfall')\n",
    "sns.lineplot(x=x, y=y, color='b')\n",
    "plt.axhline(y=0, color='black')\n",
    "plt.axhline(y=0.108, color='g')\n",
    "plt.axhline(y=-0.108, color='g')\n",
    "above_threshold = y > 0.108\n",
    "below_threshold = y < -0.108\n",
    "plt.fill_between(x, y, 0.108, where=above_threshold, color='blue', alpha=0.5)\n",
    "plt.fill_between(x, y, -0.108, where=below_threshold, color='red', alpha=0.5)\n",
    "\n",
    "\n",
    "# Plot filtered SST data\n",
    "sst_mean = Fsst_mon.mean(dim = ['lon', 'lat'])[-368:-184]\n",
    "filtered_sst = xr.DataArray(sst_mean, coords={\"time\":sst_mean.time},dims=[\"time\"])\n",
    "x = filtered_sst.time.data\n",
    "y = filtered_sst.data\n",
    "filtered_sst.plot(color = 'r', label='Filtered SST')\n",
    "\n",
    "# Add horizontal lines and fill color between them\n",
    "plt.axhline(y=0, color='black', linestyle='--', linewidth=1)\n",
    "plt.axhline(y=0.101, color='g', linestyle='--', linewidth=1)\n",
    "plt.axhline(y=-0.101, color='g', linestyle='--', linewidth=1)\n",
    "above_threshold = y > 0.101\n",
    "below_threshold = y < -0.101\n",
    "plt.fill_between(x, y, 0.101, where=above_threshold, color='red', alpha=0.5)\n",
    "plt.fill_between(x, y, -0.101, where=below_threshold, color='blue', alpha=0.5)\n",
    "\n",
    "# Set axis labels and title\n",
    "plt.xlabel('Time', fontsize=12)\n",
    "plt.ylabel('Normalized Value', fontsize=12)\n",
    "plt.title(\"Monsoon 2017 - Filtered Rainfall and SST Data\", fontsize=14)\n",
    "\n",
    "# Add legend\n",
    "plt.legend(loc='upper right', fontsize=12)\n",
    "\n",
    "# Add gridlines\n",
    "plt.grid(True)\n",
    "\n",
    "# Save figure\n",
    "plt.savefig(\"CombinedSSTRF17.png\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1772d690",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2 {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (time: 15)&gt;\n",
       "array([12.424243 ,  8.106517 , 15.09632  , 21.137434 , 38.158848 ,\n",
       "       27.20808  ,  7.893089 ,  2.3297107,  2.828029 ,  9.75989  ,\n",
       "       10.110674 , 11.995637 , 21.544767 , 26.50631  ,  9.273014 ],\n",
       "      dtype=float32)\n",
       "Coordinates:\n",
       "  * time     (time) datetime64[ns] 2018-08-01 2018-08-02 ... 2018-08-15</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 15</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-52429667-089f-4e65-b5ac-a87f7fa427b8' class='xr-array-in' type='checkbox' checked><label for='section-52429667-089f-4e65-b5ac-a87f7fa427b8' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>12.42 8.107 15.1 21.14 38.16 27.21 ... 10.11 12.0 21.54 26.51 9.273</span></div><div class='xr-array-data'><pre>array([12.424243 ,  8.106517 , 15.09632  , 21.137434 , 38.158848 ,\n",
       "       27.20808  ,  7.893089 ,  2.3297107,  2.828029 ,  9.75989  ,\n",
       "       10.110674 , 11.995637 , 21.544767 , 26.50631  ,  9.273014 ],\n",
       "      dtype=float32)</pre></div></div></li><li class='xr-section-item'><input id='section-f69125d4-a664-4e81-a4ed-0b6568766fa8' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f69125d4-a664-4e81-a4ed-0b6568766fa8' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2018-08-01 ... 2018-08-15</div><input id='attrs-67c48ec9-64be-48f2-9d57-eb2855107cde' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-67c48ec9-64be-48f2-9d57-eb2855107cde' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-20bad4d9-2a47-4db4-b40c-3c33ce9aff63' class='xr-var-data-in' type='checkbox'><label for='data-20bad4d9-2a47-4db4-b40c-3c33ce9aff63' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2018-08-01T00:00:00.000000000&#x27;, &#x27;2018-08-02T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-03T00:00:00.000000000&#x27;, &#x27;2018-08-04T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-05T00:00:00.000000000&#x27;, &#x27;2018-08-06T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-07T00:00:00.000000000&#x27;, &#x27;2018-08-08T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-09T00:00:00.000000000&#x27;, &#x27;2018-08-10T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-11T00:00:00.000000000&#x27;, &#x27;2018-08-12T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-13T00:00:00.000000000&#x27;, &#x27;2018-08-14T00:00:00.000000000&#x27;,\n",
       "       &#x27;2018-08-15T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ce2da03a-954f-4b0f-b090-a15308903f8b' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-ce2da03a-954f-4b0f-b090-a15308903f8b' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray (time: 15)>\n",
       "array([12.424243 ,  8.106517 , 15.09632  , 21.137434 , 38.158848 ,\n",
       "       27.20808  ,  7.893089 ,  2.3297107,  2.828029 ,  9.75989  ,\n",
       "       10.110674 , 11.995637 , 21.544767 , 26.50631  ,  9.273014 ],\n",
       "      dtype=float32)\n",
       "Coordinates:\n",
       "  * time     (time) datetime64[ns] 2018-08-01 2018-08-02 ... 2018-08-15"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Frf_mon.mean(dim = ['lon', 'lat'])[-92:-77]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47e7126a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
